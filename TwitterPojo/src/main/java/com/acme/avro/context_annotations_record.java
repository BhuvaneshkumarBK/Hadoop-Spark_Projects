/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.acme.avro;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class context_annotations_record extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -4204635735153842090L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"context_annotations_record\",\"namespace\":\"com.acme.avro\",\"fields\":[{\"name\":\"domain\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"domain\",\"fields\":[{\"name\":\"id\",\"type\":[\"null\",\"string\"],\"default\":\"null\"},{\"name\":\"name\",\"type\":[\"null\",\"string\"],\"default\":\"null\"},{\"name\":\"description\",\"type\":[\"null\",\"string\"],\"default\":\"null\"}]}]},{\"name\":\"entity\",\"type\":{\"type\":\"record\",\"name\":\"entity\",\"fields\":[{\"name\":\"id\",\"type\":[\"null\",\"string\"]},{\"name\":\"name\",\"type\":[\"null\",\"string\"]}]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public com.acme.avro.domain domain;
  @Deprecated public com.acme.avro.entity entity;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public context_annotations_record() {}

  /**
   * All-args constructor.
   * @param domain The new value for domain
   * @param entity The new value for entity
   */
  public context_annotations_record(com.acme.avro.domain domain, com.acme.avro.entity entity) {
    this.domain = domain;
    this.entity = entity;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return domain;
    case 1: return entity;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: domain = (com.acme.avro.domain)value$; break;
    case 1: entity = (com.acme.avro.entity)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'domain' field.
   * @return The value of the 'domain' field.
   */
  public com.acme.avro.domain getDomain() {
    return domain;
  }

  /**
   * Sets the value of the 'domain' field.
   * @param value the value to set.
   */
  public void setDomain(com.acme.avro.domain value) {
    this.domain = value;
  }

  /**
   * Gets the value of the 'entity' field.
   * @return The value of the 'entity' field.
   */
  public com.acme.avro.entity getEntity() {
    return entity;
  }

  /**
   * Sets the value of the 'entity' field.
   * @param value the value to set.
   */
  public void setEntity(com.acme.avro.entity value) {
    this.entity = value;
  }

  /**
   * Creates a new context_annotations_record RecordBuilder.
   * @return A new context_annotations_record RecordBuilder
   */
  public static com.acme.avro.context_annotations_record.Builder newBuilder() {
    return new com.acme.avro.context_annotations_record.Builder();
  }

  /**
   * Creates a new context_annotations_record RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new context_annotations_record RecordBuilder
   */
  public static com.acme.avro.context_annotations_record.Builder newBuilder(com.acme.avro.context_annotations_record.Builder other) {
    return new com.acme.avro.context_annotations_record.Builder(other);
  }

  /**
   * Creates a new context_annotations_record RecordBuilder by copying an existing context_annotations_record instance.
   * @param other The existing instance to copy.
   * @return A new context_annotations_record RecordBuilder
   */
  public static com.acme.avro.context_annotations_record.Builder newBuilder(com.acme.avro.context_annotations_record other) {
    return new com.acme.avro.context_annotations_record.Builder(other);
  }

  /**
   * RecordBuilder for context_annotations_record instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<context_annotations_record>
    implements org.apache.avro.data.RecordBuilder<context_annotations_record> {

    private com.acme.avro.domain domain;
    private com.acme.avro.domain.Builder domainBuilder;
    private com.acme.avro.entity entity;
    private com.acme.avro.entity.Builder entityBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.acme.avro.context_annotations_record.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.domain)) {
        this.domain = data().deepCopy(fields()[0].schema(), other.domain);
        fieldSetFlags()[0] = true;
      }
      if (other.hasDomainBuilder()) {
        this.domainBuilder = com.acme.avro.domain.newBuilder(other.getDomainBuilder());
      }
      if (isValidValue(fields()[1], other.entity)) {
        this.entity = data().deepCopy(fields()[1].schema(), other.entity);
        fieldSetFlags()[1] = true;
      }
      if (other.hasEntityBuilder()) {
        this.entityBuilder = com.acme.avro.entity.newBuilder(other.getEntityBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing context_annotations_record instance
     * @param other The existing instance to copy.
     */
    private Builder(com.acme.avro.context_annotations_record other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.domain)) {
        this.domain = data().deepCopy(fields()[0].schema(), other.domain);
        fieldSetFlags()[0] = true;
      }
      this.domainBuilder = null;
      if (isValidValue(fields()[1], other.entity)) {
        this.entity = data().deepCopy(fields()[1].schema(), other.entity);
        fieldSetFlags()[1] = true;
      }
      this.entityBuilder = null;
    }

    /**
      * Gets the value of the 'domain' field.
      * @return The value.
      */
    public com.acme.avro.domain getDomain() {
      return domain;
    }

    /**
      * Sets the value of the 'domain' field.
      * @param value The value of 'domain'.
      * @return This builder.
      */
    public com.acme.avro.context_annotations_record.Builder setDomain(com.acme.avro.domain value) {
      validate(fields()[0], value);
      this.domainBuilder = null;
      this.domain = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'domain' field has been set.
      * @return True if the 'domain' field has been set, false otherwise.
      */
    public boolean hasDomain() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'domain' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.acme.avro.domain.Builder getDomainBuilder() {
      if (domainBuilder == null) {
        if (hasDomain()) {
          setDomainBuilder(com.acme.avro.domain.newBuilder(domain));
        } else {
          setDomainBuilder(com.acme.avro.domain.newBuilder());
        }
      }
      return domainBuilder;
    }

    /**
     * Sets the Builder instance for the 'domain' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.acme.avro.context_annotations_record.Builder setDomainBuilder(com.acme.avro.domain.Builder value) {
      clearDomain();
      domainBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'domain' field has an active Builder instance
     * @return True if the 'domain' field has an active Builder instance
     */
    public boolean hasDomainBuilder() {
      return domainBuilder != null;
    }

    /**
      * Clears the value of the 'domain' field.
      * @return This builder.
      */
    public com.acme.avro.context_annotations_record.Builder clearDomain() {
      domain = null;
      domainBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'entity' field.
      * @return The value.
      */
    public com.acme.avro.entity getEntity() {
      return entity;
    }

    /**
      * Sets the value of the 'entity' field.
      * @param value The value of 'entity'.
      * @return This builder.
      */
    public com.acme.avro.context_annotations_record.Builder setEntity(com.acme.avro.entity value) {
      validate(fields()[1], value);
      this.entityBuilder = null;
      this.entity = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'entity' field has been set.
      * @return True if the 'entity' field has been set, false otherwise.
      */
    public boolean hasEntity() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'entity' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.acme.avro.entity.Builder getEntityBuilder() {
      if (entityBuilder == null) {
        if (hasEntity()) {
          setEntityBuilder(com.acme.avro.entity.newBuilder(entity));
        } else {
          setEntityBuilder(com.acme.avro.entity.newBuilder());
        }
      }
      return entityBuilder;
    }

    /**
     * Sets the Builder instance for the 'entity' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.acme.avro.context_annotations_record.Builder setEntityBuilder(com.acme.avro.entity.Builder value) {
      clearEntity();
      entityBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'entity' field has an active Builder instance
     * @return True if the 'entity' field has an active Builder instance
     */
    public boolean hasEntityBuilder() {
      return entityBuilder != null;
    }

    /**
      * Clears the value of the 'entity' field.
      * @return This builder.
      */
    public com.acme.avro.context_annotations_record.Builder clearEntity() {
      entity = null;
      entityBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public context_annotations_record build() {
      try {
        context_annotations_record record = new context_annotations_record();
        if (domainBuilder != null) {
          record.domain = this.domainBuilder.build();
        } else {
          record.domain = fieldSetFlags()[0] ? this.domain : (com.acme.avro.domain) defaultValue(fields()[0]);
        }
        if (entityBuilder != null) {
          record.entity = this.entityBuilder.build();
        } else {
          record.entity = fieldSetFlags()[1] ? this.entity : (com.acme.avro.entity) defaultValue(fields()[1]);
        }
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
